Pulse Width Modulation (PWM) interface

This provides an overview about the Linux PWM interface

PWMs are commonly used for controlling LEDs, fans or vibrators in
cell phones. PWMs with a fixed purpose have no need implementing
the Linux PWM API (although they could). However, PWMs are often
found as discrete devices on SoCs which have no fixed purpose. It's
up to the board designer to connect them to LEDs or fans. To provide
this kind of flexibility the generic PWM API exists.

Identifying PWMs
----------------

Users of the legacy PWM API use unique IDs to refer to PWM devices.

Instead of referring to a PWM device via its unique ID, board setup code
should instead register a static mapping that can be used to match PWM
consumers to providers, as given in the following example:

	static struct pwm_lookup board_pwm_lookup[] = {
		PWM_LOOKUP("tegra-pwm", 0, "pwm-backlight", NULL),
	};

	static void __init board_init(void)
	{
		...
		pwm_add_table(board_pwm_lookup, ARRAY_SIZE(board_pwm_lookup));
		...
	}

Using PWMs
----------

Legacy users can request a PWM device using pwm_request() and free it
after usage with pwm_free().

New users should use the pwm_get() function and pass to it the consumer
device or a consumer name. pwm_put() is used to free the PWM device. Managed
variants of these functions, devm_pwm_get() and devm_pwm_put(), also exist.

After being requested a PWM has to be configured using:

int pwm_config(struct pwm_device *pwm, int duty_ns, int period_ns);

To start/stop toggling the PWM output use pwm_enable()/pwm_disable().

Using PWMs with the sysfs interface
-----------------------------------

You have to enable CONFIG_PWM_SYSFS in your kernel configuration to use
the sysfs interface. It is exposed at /sys/class/pwm/. If there are pwm
drivers loaded and these drivers successfully probed a chip, this chip
is exported as pwmchipX . Note that a single driver can probe multiple chips.
Inside the directory you can read these properties:

base - This is the linux global start where the chips pwm channels get
exposed.

npwm - This is the number of pwm channels this chip supports.

If you want to start using a pwm channel with sysfs first you have to
export it. If you are finished with it and want to free the pwm for other
uses, you can unexport it:

export - Write the global pwm channel number to this file to start using
the channel with sysfs.

unexport - Write the global pwm channel number of the channel you are finshed
with to this file to make the channel available for other uses.

Once a pwm is exported a pwmX (X ranging from 0 to MAX_PWMS) directory appears
with the following read/write properties inside to control the pwm:

duty_ns - Write the number of nanoseconds the active portion of the pwm period
should last to this file. This can not be longer than the period_ns.

period_ns - Write the length of the pwm period in nanoseconds to this file.
This includes the active and inactive portion of the pwm period and can not
be smaller than duty_ns.

polarity - The normal behaviour is to put out a high for the active portion of
the pwm period. Write a 1 to this file to inverse the signal and output a low
on the active portion. Write a 0 to switch back to the normal behaviour. The
polarity can only be changed if the pwm is not running. This file is only
visible if the underlying driver/device supports changing the polarity.

run - Write a 1 to this file to start the pwm signal generation, write a 0 to
stop it. Set your desired period_ns, duty_ns and polarity before starting the
pwm.

It is recommend to set the period_ns at first and duty_ns after that.

Implementing a PWM driver
-------------------------

Currently there are two ways to implement pwm drivers. Traditionally
there only has been the barebone API meaning that each driver has
to implement the pwm_*() functions itself. This means that it's impossible
to have multiple PWM drivers in the system. For this reason it's mandatory
for new drivers to use the generic PWM framework.

A new PWM controller/chip can be added using pwmchip_add() and removed
again with pwmchip_remove(). pwmchip_add() takes a filled in struct
pwm_chip as argument which provides a description of the PWM chip, the
number of PWM devices provider by the chip and the chip-specific
implementation of the supported PWM operations to the framework.

Locking
-------

The PWM core list manipulations are protected by a mutex, so pwm_request()
and pwm_free() may not be called from an atomic context. Currently the
PWM core does not enforce any locking to pwm_enable(), pwm_disable() and
pwm_config(), so the calling context is currently driver specific. This
is an issue derived from the former barebone API and should be fixed soon.

Helpers
-------

Currently a PWM can only be configured with period_ns and duty_ns. For several
use cases freq_hz and duty_percent might be better. Instead of calculating
this in your driver please consider adding appropriate helpers to the framework.
